Одномерные массивы

Создайте массив целых чисел и найдите его сумму. --- {/

Определите наибольший и наименьший элемент в массиве. --- {/

Подсчитайте количество четных и нечетных элементов в массиве. --- {/

Найдите среднее арифметическое элементов массива. --- {/

Отсортируйте массив по возрастанию и убыванию. 

Проверьте, есть ли в массиве заданное значение. 

Найдите индекс первого вхождения определенного элемента. 

Удалите заданный элемент из массива. 

Поменяйте местами элементы с наименьшим и наибольшим значениями. 

Объедините два массива в один. 


Двумерные массивы:

Создайте двумерный массив и найдите сумму всех его элементов.

Найдите сумму элементов в каждой строке двумерного массива.

Найдите сумму элементов в каждом столбце двумерного массива.

Транспонируйте двумерный массив (поменяйте строки и столбцы местами).

Определите наибольший и наименьший элемент в двумерном массиве.

Поменяйте местами две строки или два столбца в двумерном массиве.

Найдите среднее значение элементов в двумерном массиве.

Подсчитайте количество нулевых элементов в двумерном массиве.

Отсортируйте строки двумерного массива по заданному столбцу.

Найдите наибольший элемент в каждой строке и наименьший элемент в каждом столбце двумерного массива.

Сумма элементов массива: Написать функцию, которая считает сумму элементов массива.

Наибольшее и наименьшее число: Написать функцию для нахождения наибольшего и наименьшего числа в массиве.

Обратный порядок массива: Написать функцию, которая разворачивает массив в обратном порядке.

Проверка на четность: Написать функцию, которая проверяет, является ли число четным.

Фильтрация четных чисел в массиве: Написать функцию, которая возвращает массив, содержащий только четные числа из исходного массива.

Линейный поиск: Написать функцию для поиска элемента в массиве.

Проверка на простое число: Написать функцию, которая определяет, является ли число простым.

Факториал числа: Написать функцию, вычисляющую факториал заданного числа.

Подсчет гласных и согласных: Написать функцию, которая подсчитывает количество гласных и согласных букв в строке.

Нахождение среднего значения: Написать функцию для вычисления среднего значения элементов числового массива.

Перестановка элементов массива: Написать функцию, которая переставляет элементы массива в случайном порядке.

Палиндром: Написать функцию, которая проверяет, является ли строка или число палиндромом.

Слияние двух массивов: Написать функцию для слияния двух массивов в один.

Нахождение наибольшего общего делителя (НОД): Написать функцию для вычисления НОД двух чисел.

Сортировка массива: Написать функцию для сортировки массива методом выбора.

Расчет степени числа: Написать функцию, которая возводит число в заданную степень.

Проверка массива на уникальность элементов: Написать функцию, которая проверяет, все ли элементы в массиве уникальны.

Создание таблицы умножения: Написать функцию, которая выводит таблицу умножения до заданного числа.

Перевод числа в двоичный формат: Написать функцию для конвертации десятичного числа в двоичное.

Нахождение всех делителей числа: Написать функцию, которая выводит все делители заданного числа.

Реализация ArrayList: Создайте собственную реализацию ArrayList, поддерживающую основные операции, такие как добавление, удаление и поиск элементов.

Объединение двух списков: Напишите метод, который объединяет два списка (ArrayList) в один.

Удаление дубликатов из списка: Напишите метод для удаления всех дубликатов из заданного списка.

Сортировка HashMap по значениям: Напишите программу для сортировки HashMap по значениям.

Нахождение пересечений в двух списках: Напишите метод для нахождения общих элементов в двух списках.

Реверс LinkedList: Напишите функцию для реверса LinkedList в Java без использования встроенных методов.

Частота встречаемости элементов: Напишите программу, которая подсчитывает частоту встречаемости каждого элемента в списке.

Перемешивание списка: Напишите метод для перемешивания элементов в ArrayList.

Поиск подмножества: Напишите метод, который проверяет, является ли один список подмножеством другого.

Преобразование списка в массив: Напишите метод для преобразования ArrayList в массив.

Сортировка списка объектов: Напишите метод для сортировки списка объектов с использованием Comparator.

Min и Max в коллекции: Найдите минимальный и максимальный элементы в коллекции.

Удаление элементов по условию: Напишите метод для удаления элементов из списка по определенному условию.

Копирование одной коллекции в другую: Напишите метод для копирования всех элементов из одной коллекции в другую.

Синхронизация ArrayList: Напишите метод, который делает ArrayList синхронизированным.

Поиск элемента в TreeSet: Напишите программу для поиска определенного элемента в TreeSet.

Пересечение двух HashSet: Напишите метод для нахождения пересечения двух HashSet.

Сравнение двух списков: Напишите метод, который сравнивает два списка на равенство.

Создание неизменяемой коллекции: Напишите метод, который создает неизменяемую коллекцию из заданного списка.

Конвертация списка в Set: Напишите метод для преобразования ArrayList в HashSet для удаления дубликатов.


ИЗУЧАЕМ SPRING BOOT


1. Погодное приложение (Weather):
Поля: temperature (double), humidity (double), pressure (double).
Методы:
updateWeather(double temp, double hum, double press): обновляет погодные данные.
displayWeather(): отображает текущие погодные условия.
Дополнительно: Реализуйте функцию предсказания погоды на основе данных.

2. Игровой персонаж (GameCharacter):
Поля: name (String), health (int), strength (int).
Методы:
attack(GameCharacter other): атакует другого персонажа, уменьшая его здоровье.
defend(): увеличивает оборону персонажа.
Дополнительно: Добавьте способности и уровни для персонажа.

3. Музыкальный плеер (Song и Playlist):
Song:
Поля: title (String), artist (String), duration (double).
Playlist:
Поля: songs (List<Song>).
Методы:
addSong(Song song): добавляет песню в плейлист.
play(): воспроизводит плейлист.
Дополнительно: Реализуйте функцию перемешивания плейлиста.

4. Калькулятор (Calculator):
Методы:
add(double a, double b): возвращает сумму a и b.
subtract(double a, double b): возвращает разность a и b.
multiply(double a, double b): возвращает произведение a и b.
divide(double a, double b): возвращает частное a и b.
Дополнительно: Реализуйте функции для расчета степени, корня и процентов.

5. Зоопарк (Animal и Zoo):
Animal:
Поля: species (String), name (String), age (int).
Zoo:
Поля: animals (List<Animal>).
Методы:
addAnimal(Animal animal): добавляет животное в зоопарк.
displayAnimals(): отображает информацию о всех животных.
Дополнительно: Реализуйте функцию поиска животных по виду.

6. Cистема управления персоналом (Employee и HRManager):
Employee:
Поля: name (String), position (String), salary (double).
HRManager:
Методы:
hire(Employee employee): нанимает нового сотрудника.
fire(Employee employee): увольняет сотрудника.
raiseSalary(Employee employee, double amount): повышает зарплату сотрудника.
Дополнительно: Реализуйте систему оценки производительности сотрудников.

7. Погодное приложение (Weather):
   - Поля: temperature (double), humidity (double), pressure (double).
   - Методы:
     - updateWeather(double temp, double hum, double press): обновляет погодные данные.
     - displayWeather(): отображает текущие погодные условия.
   - Дополнительно: Реализуйте функцию предсказания погоды на основе данных.

8. Игровой персонаж (GameCharacter):
   - Поля: name (String), health (int), strength (int).
   - Методы:
     - attack(GameCharacter other): атакует другого персонажа, уменьшая его здоровье.
     - defend(): увеличивает оборону персонажа.
   - Дополнительно: Добавьте способности и уровни для персонажа.

9. Музыкальный плеер (Song и Playlist):
   - Song:
     - Поля: title (String), artist (String), duration (double).
   - Playlist:
     - Поля: songs (List<Song>).
     - Методы:
       - addSong(Song song): добавляет песню в плейлист.
       - play(): воспроизводит плейлист.
   - Дополнительно: Реализуйте функцию перемешивания плейлиста.

10. Калькулятор (Calculator):
    - Методы: 
      - add(double a, double b): возвращает сумму a и b.
      - subtract(double a, double b): возвращает разность a и b.
      - multiply(double a, double b): возвращает произведение a и b.
      - divide(double a, double b): возвращает частное a и b.
    - Дополнительно: Реализуйте функции для расчета степени, корня и процентов.

11. Зоопарк (Animal и Zoo):
    - Animal:
      - Поля: species (String), name (String), age (int).
    - Zoo:
      - Поля: animals (List<Animal>).
      - Методы:
        - addAnimal(Animal animal): добавляет животное в зоопарк.
        - displayAnimals(): отображает информацию о всех животных.
    - Дополнительно: Реализуйте функцию поиска животных по виду.

12. Система управления персоналом (Employee и HRManager):
    - Employee:
      - Поля: name (String), position (String), salary (double).
    - HRManager:
      - Методы:
        - hire(Employee employee): нанимает нового сотрудника.
        - fire(Employee employee): увольняет сотрудника.
        - raiseSalary(Employee employee, double amount): повышает зарплату сотрудника.

- Дополнительно: Реализуйте систему оценки производительности сотрудников.

13. Кинотеатр (Movie и Cinema):
    - Movie:
      - Поля: title (String), duration (int), genre (String).
    - Cinema:
      - Поля: movies (List<Movie>).
      - Методы:
        - addMovie(Movie movie): добавляет фильм в кинотеатр.
        - showMovie(Movie movie): демонстрирует выбранный фильм.
    - Дополнительно: Реализуйте расписание сеансов.

14. Телефонная книга (Contact и PhoneBook):
    - Contact:
      - Поля: name (String), phoneNumber (String).
    - PhoneBook:
      - Поля: contacts (List<Contact>).
      - Методы:
        - addContact(Contact contact): добавляет контакт.
        - findContact(String name): ищет контакт по имени.
    - Дополнительно: Реализуйте удаление и редактирование контактов.

15. Университет (Course, Student, Professor):
    - Course:
      - Поля: name (String), students (List<Student>), professor (Professor).
      - Методы:
        - enrollStudent(Student student): записывает студента на курс.
        - assignProfessor(Professor professor): назначает преподавателя на курс.
    - Student и Professor с полями и методами по необходимости.
    - Дополнительно: Реализуйте систему оценок и посещаемости.

16. Пиццерия (Pizza, Order, Pizzeria):
    - Pizza:
      - Поля: name (String), ingredients (List<String>), price (double).
    - Order:
      - Поля: pizzas (List<Pizza>), totalPrice (double).
      - Методы:
        - addPizza(Pizza pizza): добавляет пиццу в заказ.
        - calculateTotal(): рассчитывает итоговую стоимость заказа.
    - Pizzeria:
      - Методы:
        - placeOrder(Order order): оформляет заказ и управляет процессом приготовления.
    - Дополнительно: Реализуйте систему отслеживания статуса заказа.

17. Фотогалерея (Photo и Gallery):
    - Photo:
      - Поля: title (String), dateTaken (LocalDate), description (String).
    - Gallery:
      - Поля: photos (List<Photo>).
      - Методы:
        - addPhoto(Photo photo): добавляет фотографию в галерею.
        - displayPhotos(): показывает все фотографии с описаниями.
    - Дополнительно: Реализуйте функцию поиска фотографий по дате или названию.

18. Время (Time):
    - Поля: hours (int), minutes (int), seconds (int).
    - Методы:
      - setTime(int hours, int minutes, int seconds): устанавливает время.
      - displayTime(): отображает текущее время.
    - Дополнительно: Реализуйте функцию для добавления времени (например, добавить 30 минут).

19. Путешествие (Destination, Trip, TravelAgency):
    - Destination:
      - Поля: name (String), country (String), attractions (List<String>).
    - Trip:
      - Поля: destination (Destination), duration (int), cost (double).
    - TravelAgency:
      - Методы:
        - planTrip(Destination destination): планирует поездку.
        - bookTrip(Trip trip): бронирует поездку.
    - Дополнительно: Реализуйте систему скидок для частых путешественников.

20. Система учета расходов (Expense и ExpenseTracker):
    - Expense:
      - Поля: category (String), amount (double), date (LocalDate).
    - ExpenseTracker:
      - Поля: expenses (List<Expense>).
      - Методы:
        - addExpense(Expense expense): добавляет расход в трекер.
        - calculateTotal(): рассчитывает общую сумму расходов.