Типы данных:
- Примитивные: int, double, char, boolean, String
- Ссылочные: Классы, Интрефейсы, Массивы

Класс Scanner в Java используется для считывания ввода от пользователя.

static - поля и методы принадлежат классу, а не конкретному объекту.

Основные методы класса String:
length(): Возвращает длину строки.
charAt(int index): Возвращает символ на указанной позиции.
substring(int beginIndex, int endIndex): Возвращает подстроку.
equals(Object another): Сравнивает две строки на равенство.
equalsIgnoreCase(String anotherString): Сравнивает строки, игнорируя регистр.
indexOf(String str): Возвращает индекс первого вхождения подстроки.
toLowerCase(): Преобразует все символы строки в нижний регистр.
toUpperCase(): Преобразует все символы строки в верхний регистр.

Метод String.format() используется для создания форматированных строк.  
Спецификаторы формата:
%s-строка, %d-десятичное целое число, %f-число с плавающей запятой, %t-дата/время

Класс Arrays в Java предоставляет статические методы для удобной работы с массивами.
sort(T[ ] a): Сортирует указанный массив в порядке возрастания.
binarySearch(T[ ] a, T key): Выполняет бинарный поиск элемента в отсортированном массиве и возвращает индекс найденного элемента.
fill(T[ ] a, T val): Заполняет все элементы массива указанным значением.
copyOf(T[ ] original, int newLength): Копирует указанный массив, обрезая или дополняя его до указанной длины.
equals(Object[ ] a, Object[ ] a2): Сравнивает два массива на равенство.
asList(T... a): Создает список, который возвращается в виде фиксированного размера.
toString(T[ ] a): Возвращает строковое представление указанного массива.
stream(T[ ] array): Возвращает последовательность потока элементов массива.
hashCode(T[ ] a): Возвращает хеш-код для указанного массива.
parallelPrefix(T[ ] array, BinaryOperator<T> op): Выполняет параллельную префиксную операцию над указанным массивом.
parallelSetAll(T[ ] array, IntFunction<T> generator): Устанавливает все элементы указанного массива в значения, сгенерированные заданным генератором.
parallelSort(T[ ] array): Сортирует указанный массив в порядке возрастания, используя параллельное выполнение.

Интегрированная среда разработки (IDE)
IntelliJ IDEA: Идеально подходит для профессиональных Java-разработчиков и крупных проектов благодаря мощным инструментам и высокой производительности.
Eclipse: Отличный выбор для разработчиков, работающих с множеством языков и ищущих гибкость и расширяемость.
NetBeans: Подходит для быстрого старта и визуального проектирования GUI.
Oracle JDeveloper: Лучший выбор для проектов, тесно связанных с технологиями Oracle и корпоративными решениями.

Класс Math позволяет выполнять различные математические операции. Классы Date, Calendar и DateFormat обеспечивают удобную работу с датами и временем

ООП
Инкапсуляция - сеттеры и геттеры
Наследование - extends, @Override
Полиморфизм - на ряду с Наследованием
Абстракция - abstract (class & void), extends, @Override

План

0-3 месяца (Ученик)

Вы знаете о программировании очень мало. Может учили в школе и/или университете, но очень поверхностно.

Ваша задача – учиться программированию и изучать Java.

Ваша цель – устроится на работу Java Junior’ом в компанию не ниже 3-го уровня.

Первые три месяца на плане вы не получаете ничего, т.к. просто изучаете программирование. В будущем, когда у вас будет семья и куча кредитов, сменить специализацию будет гораздо сложнее. Чтобы исправить ошибку вам понадобится отложить денег на год нормальной жизни. Не делайте глупых ошибок.

3-15 месяцев (Java Junior Developer)

Вы уже работаете программистом, и ваш опыт растёт с каждым днём. Не прохлаждайтесь. Вам ещё многое предстоит сделать, чтобы можно было почивать на лаврах.

Ваша задача – изучать технологии, которые понадобятся вам, как Middle разработчику. Какие именно технологии? Мир меняется. Я сейчас насоветую, а жизнь все поменяет. Найдите в интернете несколько вакансий и посмотрите, что для них требуется. Обязательно прочитайте книгу Брюса Эккеля «Философия Java».

Ваша цель в первый год работы Java Junior’ом – это дорасти до уровня Java Middle. Никто не говорит что это очень легко, но вполне возможно для целеустремлённого человека. Это сразу даст скачок ЗП до полутора тысяч.

2-й год работы программистом (Java Middle Developer, level 1)

Вы хорошо потрудились в прошлый год, и теперь вы - Java Middle Developer. С зарплатой в полторы тысячи можно нормально жить. На работе вам дают серьёзные задания, и ваш опыт растёт как на дрожжах. Вы дорастёте до Java Senior Developer за два-три года. Нет смысла ускорять этот процесс. Сильного роста в зарплате вы все равно не получите.

Ваша задача – изучите паттерны проектирования, прочитайте «Совершенный код» МакКоннела. Улучшайте качество своего кода и свои навыки работы в команде. Можно взять за правило каждую неделю читать одну книгу по ИТ-тематике. Тогда через 4 года, вы будете на 50 книг умнее всех остальных. Не стоит откладывать это на потом: свободного времени у вас больше не станет, к тому же, вероятно, у вас появится семья, или пополнится, если уже есть.

Ваша цель – выбрать несколько технологий, в которых вы будете специализироваться как Senior разработчик. Всего вам все равно не изучить. А быть гуру в небольшой области – это хорошее решение.

3-й год работы программистом (Java Middle Developer, level 2)

Вы уже опытный Middle разработчик и начинаете подумывать – стать Senior Developer. Это приятно и престижно. Ваша зарплата превышает 2 тысячи долларов (данные для Киева). С этого момента спрос на таких профессионалов как вы, превышает предложение. Вы всегда сможете устроиться на работу за пару дней, и вряд ли будете получать меньше, чем сейчас. Если, конечно, не выкинете какую-нибудь глупость.

Ваша задача – продолжить изучение выбранных технологий. Работайте лучше. Не ради работодателя, ради вас самих. Проситесь в проекты с перспективными технологиями (такими как Big Data, на момент написания этой статьи). Вы все равно будете проводить в офисе 8 часов в день, так почему бы не получить за это немного больше денег и, что гораздо важнее, ценнейший опыт, который вам ещё понадобится.

Ваша цель – сменить работу. Хороший коллектив есть везде. Вы столкнётесь с новыми проектами и технологиями. Не стоит раньше времени прирастать к стулу. Если вы все ещё работаете в компании третьего уровня, подумайте над переходом на четвёртый уровень. Пятый уровень, хоть и очень привлекательный, пока недостижим.

4-й год работы программистом (Java Senior Developer, level 1)

Вы стали Senior разработчиком. Поздравляю. Возможно, стали им незаслуженно, и вы это чувствуйте. Все равно поздравляю. Не важно, достойны ли вы сейчас вашей должности, главное чтобы вы стали достойны её в будущем. Согласитесь, лучше сначала получить хорошую работу, а через год дорасти до неё, чем дорасти до хорошей позиции и ждать её ещё год.

Надеюсь, вы не забыли мой совет и читали по одной книге в неделю - теперь вашим возможностям позавидует любой студент. Вернее он готов молиться на них. Подумайте, у вас серьёзная зарплата, приближающаяся к трём тысячам долларов. Скорее всего, вы ещё молоды. Весь мир у вас под ногами.

Ваша задача – ещё раз просмотреть выбранные вами технологии. Возможно, вам нужно сменить специализацию. Мир изменился, технологии изменились, да и знаний у вас за два последних года прибавилось. То, на чем вы сейчас остановитесь – станет вашим выбором на несколько ближайших лет. Самое время выбирать любимые технологии.

Ваша цель - выбрать направление, в котором вы могли бы развиваться дальше. Их очень много, всех вариантов никто не перечислит, но выбор нужно сделать прямо сейчас. Если сегодня вы немного измените своё настоящее, это приведёт к большим изменениям в вашем будущем.

5-й год работы программистом (Java Senior Developer, level 2)

Вы определились с вашим будущим и работаете над воплощением вашей мечты. Правильно выбранное направление в совокупности с желанием идти вперёд и результат не заставил себя ждать. Поздравляю. Я рад, что ещё одним счастливым человеком стало больше.

Есть одна мудрая истина. Люди часто переоцениваю чего можно добиться за один год, и недооценивают, чего можно добиться за пять лет. Оглянитесь на пять лет назад. Так оно и есть.

Ваша задача – не принимать глупых решений и не идти на поводу у лени.

Ваша цель – выбрать направление и двигаться дальше. А вы думали это конец? Вспомните свой выпускной класс. Это не конец, это только начало.

Будущая специализация

Вы можете развиваться как технический специалист (верхняя ветка), как управленец (нижняя ветка) или как наемный профессионал/независимый консультант (средняя ветка). Все зависти от ваших предпочтений.

Карьера программиста

Профессия программист отличается от других профессий. Здесь нет необходимости делать карьеру менеджера, чтобы хорошо зарабатывать. Нередки ситуации, когда старший программист получает больше, чем его начальник-менеджер. Чем больше вы набираете опыта, тем сильнее ваши отношения с начальством движутся от точки «начальник-рабочий» к отношениям вида «кинозвезда и её менеджер». Зажравшиеся знающие себе цену программисты перебирают и проектами и вакансиями. Порадуемся за своих.

Что же нужно, чтобы стать таким высококлассным и востребованном в мировом масштабе программистом? Вы должны иметь большой опыт в самых новых и востребованных технологиях. Как этого достичь? Ответ ниже.

После того, как вы первый раз устроились работать программистом, с вами начинают происходить две вещи, которые, как ни странно, не всегда бросаются в глаза.

1 Вы начинаете быстро набирать опыт работы в реальных проектах. Один год опыта работы программистом может дать вам больше знаний и навыков в вашей специальности, чем 5 лет университета. Опыт – это настолько значимый показатель, что в IT-вакансиях зачастую пишут «требуется Java-программист с тремя годами опыта работы».

2 Вы по 8 часов в день изучаете новые технологии, а вам за это ещё и щедро платят. Значимость этого фактора трудно переоценить. В некоторых случаях полученные навыки настолько ценны, что ради их получения можно работать бесплатно, а то и доплачивать. Если вы грамотно выбираете проекты, на которых соглашаетесь работать, то вас ждёт головокружительная карьера программиста.

Вот только, что же выбрать?

Зачастую, если вы не знаете, какие технологии будут вам полезны, вы начинаете выбирать технологии по принципу «нравится, не нравится» или «модно, не модно». Тут уж как повезёт. Так что, лучше знать заранее, куда вы хотите попасть.

Путей развития программиста очень много, поэтому я, для простоты, выделю несколько из них, и напишу своё видение полученной ситуации. Не стоит воспринимать эту схему как жёсткую позицию, скорее как упрощённый взгляд на вещи, с целью внести хоть какую-то ясность.

Двухсотлетний программист

Если больше всего вам нравится программировать, то ваш путь: Senior Developer, затем Tech Lead Developer и архитектор. Также вы можете просто работать программистом лет 50. Зачастую зарплаты старших программистов и техлидов превышают зарплаты их менеджеров. Не прогадайте.

Менеджер. Тебе повезло, ты не такой как все.

Вы перешли на сторону врага. Шучу. Если у вас открылись недюжие организаторские способности, то ваш путь: Team Lead, а затем Project Manager. Это даст вам шанс стать директором и поможет при открытии своего дела. Вы ведь этого хотите, не так ведь?
